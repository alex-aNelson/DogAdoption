@page "/messages/details"
@using Microsoft.EntityFrameworkCore
@using DogAdoption.Models
@inject IDbContextFactory<DogAdoption.Data.DogAdoptionContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Messages</h2>
    <hr />
    @if (messages is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Username</dt>
            <dd class="col-sm-10">@messages.Username</dd>
            <dt class="col-sm-2">Header</dt>
            <dd class="col-sm-10">@messages.Header</dd>
            <dt class="col-sm-2">Contents</dt>
            <dd class="col-sm-10">@messages.Contents</dd>
        </dl>
        <div>
            <a href="@($"/messages/edit?messageid={messages.MessageID}")">Edit</a> |
            <a href="@($"/messages")">Back to List</a>
        </div>
    }
</div>

@code {
    private Messages? messages;

    [SupplyParameterFromQuery]
    private int MessageID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        messages = await context.Messages.FirstOrDefaultAsync(m => m.MessageID == MessageID);

        if (messages is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
