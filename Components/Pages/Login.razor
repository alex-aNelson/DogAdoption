@page "/login"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager

@using Microsoft.EntityFrameworkCore
@using DogAdoption.Models
@using System.Diagnostics
@using DogAdoption.Data
@using System.ComponentModel.DataAnnotations
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<DogAdoption.Data.DogAdoptionContext> DbFactory
@inject DogAdoption.Data.DogAdoptionContext DbContext

<div class="login-container">
    <div class="login-form">
        <h2>Login</h2>

        <EditForm EditContext="editContext" OnValidSubmit="HandleLogin">
            <div class="form-group">
                <label for="username">Username</label>
                <InputText id="username" @bind-Value="Username" class="form-control" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" @bind-Value="Password" type="password" class="form-control" />
            </div>

            <button type="submit" class="btn-login">Login</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(LoginError))
        {
            <div class="alert alert-danger mt-2" role="alert">
                @LoginError
            </div>
        }

        <div class="additional-links">
            <a href="/register" class="btn-login">Register an Account</a>
            <a href="/forgotpassword" class="btn-login">Forgot Password</a>
        </div>
    </div>
</div>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        padding-top: 10vh;
        height: 100vh;
        background-color: #f7f7f7;
    }

    .login-form {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
        text-align: center;
    }

        .login-form h2 {
            margin-bottom: 1.5rem;
            color: #333;
        }

    .form-group {
        margin-bottom: 1rem;
        text-align: left;
    }

        .form-group label {
            font-weight: bold;
            margin-bottom: 0.5rem;
            display: block;
        }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 4px;
        outline: none;
        transition: border-color 0.2s;
    }

        .form-control:focus {
            border-color: #009879;
        }

    .btn-login {
        background-color: #009879;
        color: white;
        font-size: 1rem;
        font-weight: bold;
        padding: 0.75rem;
        width: 100%;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.2s;
        text-align: center;
        display: block;
        margin-top: 1rem;
    }

        .btn-login:hover {
            background-color: #007f63;
        }

    .additional-links a {
        display: block;
        margin-top: 1rem;
        font-size: 1rem;
        color: white;
        background-color: #009879;
        padding: 0.75rem;
        text-align: center;
        text-decoration: none;
        border-radius: 4px;
        transition: background-color 0.2s;
    }

        .additional-links a:hover {
            background-color: #007f63;
        }

    .alert {
        margin-top: 1rem;
        font-size: 0.875rem;
    }
</style>

@if (!string.IsNullOrEmpty(LoginError))
{
    <div class="alert alert-danger mt-2" role="alert">
        @LoginError
    </div>
}


@code {
    private EditContext editContext;
    //Storing the username and password provided by the user
    private string? Username { get; set; } = string.Empty;
    private string? Password { get; set; } = string.Empty;
    private string? LoginError { get; set; }

    protected override void OnInitialized()
    {
        // Initialize the EditContext with the current instance
        editContext = new EditContext(this);
    }

    private async void HandleLogin()
    {


        //Searching the database for a matching username (They have to be unique so there's only going to be one)
        var dbContext = DbFactory.CreateDbContext();
        var existingUser = await dbContext.User.FirstOrDefaultAsync(u => u.Username == Username);


        if (existingUser is null)
        {
            LoginError = "Could not find an account";
            StateHasChanged();
            return;
        }

        if (existingUser.Password != Password)
        {
            LoginError = "Username and Password do not match";
            StateHasChanged();
            return;
        }

        //Successful login
        //((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(Username);
        NavigationManager.NavigateTo("/");
    }
}
