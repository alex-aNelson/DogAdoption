@page "/adoptionpostings/edit"
@using Microsoft.EntityFrameworkCore
@using DogAdoption.Models
@inject IDbContextFactory<DogAdoption.Data.DogAdoptionContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>AdoptionPosting</h2>
<hr />
@if (AdoptionPosting is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="AdoptionPosting" OnValidSubmit="UpdateAdoptionPosting" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="AdoptionPosting.AdoptionPostingID" value="@AdoptionPosting.AdoptionPostingID" />
                <div class="mb-3">
                    <label for="dogid" class="form-label">DogID:</label>
                    <InputNumber id="dogid" @bind-Value="AdoptionPosting.DogID" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => AdoptionPosting.DogID" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="AdoptionPosting.Description" class="form-control" />
                    <ValidationMessage For="() => AdoptionPosting.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="AdoptionPosting.Price" class="form-control" />
                    <ValidationMessage For="() => AdoptionPosting.Price" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/adoptionpostings">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int AdoptionPostingID { get; set; }

    [SupplyParameterFromForm]
    private AdoptionPosting? AdoptionPosting { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        AdoptionPosting ??= await context.AdoptionPosting.FirstOrDefaultAsync(m => m.AdoptionPostingID == AdoptionPostingID);

        if (AdoptionPosting is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateAdoptionPosting()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(AdoptionPosting!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AdoptionPostingExists(AdoptionPosting!.AdoptionPostingID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/adoptionpostings");
    }

    private bool AdoptionPostingExists(int adoptionpostingid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.AdoptionPosting.Any(e => e.AdoptionPostingID == adoptionpostingid);
    }
}
