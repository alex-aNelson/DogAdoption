@page "/forgotpassword"

@using Microsoft.EntityFrameworkCore
@using DogAdoption.Models
@using System.Diagnostics
@using DogAdoption.Data
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<DogAdoption.Data.DogAdoptionContext> DbFactory
@inject DogAdoption.Data.DogAdoptionContext DbContext

<PageTitle>Forgot Password</PageTitle>

<div class="forgot-password-container">
    <div class="forgot-password-form">
        <h2>Forgot Password</h2>

        <EditForm EditContext="editContext" OnValidSubmit="ResetPassword" FormName="ForgotPasswordForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-group">
                <label for="ID" class="form-label">Enter your Customer ID:</label>
                <InputText id="ID" @bind-Value="ID" class="form-control" aria-required="true" />
                <ValidationMessage For="() => ID" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="password" class="form-label">Enter your new password:</label>
                <InputText id="password" @bind-Value="Password" type="password" class="form-control" aria-required="true" />
                <ValidationMessage For="() => Password" class="text-danger" />
            </div>

            <button type="submit" class="btn-register">Reset Password</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(LoginError))
        {
            <div class="alert alert-danger mt-2" role="alert">
                @LoginError
            </div>
        }

        <div class="additional-links">
            <a href="/login" class="btn-register">Back to Login</a>
        </div>
    </div>
</div>

<style>
    .forgot-password-container {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        padding-top: 10vh;
        height: 100vh;
        background-color: #f7f7f7;
    }

    .forgot-password-form {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
        text-align: center;
    }

        .forgot-password-form h2 {
            margin-bottom: 1.5rem;
            color: #333;
        }

    .form-group {
        margin-bottom: 1rem;
        text-align: left;
    }

        .form-group label {
            font-weight: bold;
            margin-bottom: 0.5rem;
            display: block;
        }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 4px;
        outline: none;
        transition: border-color 0.2s;
    }

        .form-control:focus {
            border-color: #009879;
        }

    .btn-register {
        background-color: #009879;
        color: white;
        font-size: 1rem;
        font-weight: bold;
        padding: 0.75rem;
        width: 100%;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.2s;
        text-align: center;
        display: block;
        margin-top: 1rem;
    }

        .btn-register:hover {
            background-color: #007f63;
        }

    .additional-links a {
        display: block;
        margin-top: 1rem;
        font-size: 1rem;
        color: white;
        background-color: #009879;
        padding: 0.75rem;
        text-align: center;
        text-decoration: none;
        border-radius: 4px;
        transition: background-color 0.2s;
    }

        .additional-links a:hover {
            background-color: #007f63;
        }

    .alert {
        margin-top: 1rem;
        font-size: 0.875rem;
    }
</style>

@code {
    private EditContext editContext;
    protected override void OnInitialized()
    {
        // Initialize the EditContext with the current instance
        editContext = new EditContext(this);
    }

    private string? ID { get; set; } = string.Empty;
    private string? Password { get; set; } = string.Empty;
    private string? LoginError { get; set; }

    private async void ResetPassword()
    {
        Debug.WriteLine($"Entered ID: {ID}");

        if (!int.TryParse(ID, out var parsedID))
        {
            LoginError = "Invalid Customer ID. Please enter a valid number.";
            StateHasChanged();
            return;
        }
        //Searching the database for a matching ID
        var dbContext = DbFactory.CreateDbContext();
        var existingUser = await dbContext.User.FirstOrDefaultAsync(u => u.UserID == parsedID);


        //No user with matching ID found
        if (existingUser is null)
        {
            LoginError = "Could not find an account";
            StateHasChanged();
            return;
        }

        //Match Found

        //Changing Password
        existingUser.Password = Password;

        //Go back to login
        NavigationManager.NavigateTo("/login");
    }
}
