@page "/users/delete"
@using Microsoft.EntityFrameworkCore
@using DogAdoption.Models
@inject IDbContextFactory<DogAdoption.Data.DogAdoptionContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete User</PageTitle>

<div class="container mt-5">
    <!-- Header -->
    <div class="row">
        <div class="col-12">
            <h1 class="text-center mb-4">Delete User</h1>
        </div>
    </div>

    <!-- Confirmation Message -->
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="alert alert-warning text-center" role="alert">
                Are you sure you want to delete this user?
            </div>
        </div>
    </div>

    <!-- User Details -->
    <div class="row justify-content-center">
        <div class="col-md-8">
            @if (user is null)
            {
                <p class="text-center"><em>Loading...</em></p>
            }
            else
            {
                <dl class="row bg-light p-4 rounded">
                    <dt class="col-sm-3">Username</dt>
                    <dd class="col-sm-9">@user.Username</dd>

                    <dt class="col-sm-3">Password</dt>
                    <dd class="col-sm-9">@user.Password</dd>

                    <dt class="col-sm-3">Is Admin</dt>
                    <dd class="col-sm-9">@user.IsAdmin</dd>

                    <dt class="col-sm-3">Date of Birth</dt>
                    <dd class="col-sm-9">@user.DateOfBirth</dd>
                </dl>
                <EditForm method="post" Model="user" OnValidSubmit="DeleteUser" FormName="delete" class="text-center mt-3">
                    <button type="submit" class="btn btn-danger me-2" disabled="@(user is null)">Delete</button>
                    <a class="btn btn-secondary" href="/users">Back to List</a>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    private User? user;

    [SupplyParameterFromQuery]
    private int UserID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        user = await context.User.FirstOrDefaultAsync(m => m.UserID == UserID);

        if (user is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteUser()
    {
        using var context = DbFactory.CreateDbContext();
        context.User.Remove(user!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/users");
    }
}
