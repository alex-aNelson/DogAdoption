@page "/users/edit"
@using Microsoft.EntityFrameworkCore
@using DogAdoption.Models
@inject IDbContextFactory<DogAdoption.Data.DogAdoptionContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit User</PageTitle>

<div class="container mt-5">
    <!-- Header -->
    <div class="row">
        <div class="col-12">
            <h1 class="text-center mb-4">Edit User</h1>
        </div>
    </div>

    <!-- User Form -->
    @if (User is null)
    {
        <p class="text-center"><em>Loading...</em></p>
    }
    else
    {
        <div class="row justify-content-center">
            <div class="col-md-6">
                <EditForm method="post" Model="User" OnValidSubmit="UpdateUser" FormName="edit" class="bg-light p-4 rounded">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <input type="hidden" name="User.UserID" value="@User.UserID" />

                    <div class="mb-3">
                        <label for="username" class="form-label">Username:</label>
                        <InputText id="username" @bind-Value="User.Username" class="form-control" aria-required="true" />
                        <ValidationMessage For="() => User.Username" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password:</label>
                        <InputText id="password" @bind-Value="User.Password" class="form-control" aria-required="true" />
                        <ValidationMessage For="() => User.Password" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="isadmin" class="form-label">Is Admin:</label>
                        <InputCheckbox id="isadmin" @bind-Value="User.IsAdmin" class="form-check-input" />
                        <ValidationMessage For="() => User.IsAdmin" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="dateofbirth" class="form-label">Date of Birth:</label>
                        <InputDate id="dateofbirth" @bind-Value="User.DateOfBirth" class="form-control" aria-required="true" />
                        <ValidationMessage For="() => User.DateOfBirth" class="text-danger" />
                    </div>

                    <button type="submit" class="btn btn-primary">Save</button>
                </EditForm>
            </div>
        </div>
    }

    <div class="row mt-3">
        <div class="col-12 text-center">
            <a class="btn btn-secondary" href="/users">Back to List</a>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private int UserID { get; set; }

    private User? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        User ??= await context.User.FirstOrDefaultAsync(m => m.UserID == UserID);

        if (User is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateUser()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(User!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UserExists(User!.UserID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/users");
    }

    private bool UserExists(int userid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.User.Any(e => e.UserID == userid);
    }
}
