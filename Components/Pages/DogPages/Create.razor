@page "/dogs/create"
@using Microsoft.EntityFrameworkCore
@using DogAdoption.Models
@inject IDbContextFactory<DogAdoption.Data.DogAdoptionContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Dog</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Dog" OnValidSubmit="AddDog" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="dogname" class="form-label">DogName:</label> 
                <InputText id="dogname" @bind-Value="Dog.DogName" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Dog.DogName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dogage" class="form-label">DogAge:</label> 
                <InputNumber id="dogage" @bind-Value="Dog.DogAge" class="form-control" /> 
                <ValidationMessage For="() => Dog.DogAge" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dogweight" class="form-label">DogWeight:</label> 
                <InputNumber id="dogweight" @bind-Value="Dog.DogWeight" class="form-control" /> 
                <ValidationMessage For="() => Dog.DogWeight" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dogbreed" class="form-label">DogBreed:</label> 
                <InputText id="dogbreed" @bind-Value="Dog.DogBreed" class="form-control" /> 
                <ValidationMessage For="() => Dog.DogBreed" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="ismale" class="form-label">IsMale:</label> 
                <InputCheckbox id="ismale" @bind-Value="Dog.IsMale" class="form-check-input" /> 
                <ValidationMessage For="() => Dog.IsMale" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="isvaccinated" class="form-label">IsVaccinated:</label> 
                <InputCheckbox id="isvaccinated" @bind-Value="Dog.IsVaccinated" class="form-check-input" /> 
                <ValidationMessage For="() => Dog.IsVaccinated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="isneutered" class="form-label">IsNeutered:</label> 
                <InputCheckbox id="isneutered" @bind-Value="Dog.IsNeutered" class="form-check-input" /> 
                <ValidationMessage For="() => Dog.IsNeutered" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="temperament" class="form-label">Temperament:</label> 
                <InputText id="temperament" @bind-Value="Dog.Temperament" class="form-control" /> 
                <ValidationMessage For="() => Dog.Temperament" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/dogs">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Dog Dog { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddDog()
    {
        using var context = DbFactory.CreateDbContext();
        context.Dog.Add(Dog);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/dogs");
    }
}
