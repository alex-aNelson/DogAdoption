@page "/adoptionapplications/delete"
@using Microsoft.EntityFrameworkCore
@using DogAdoption.Models
@inject IDbContextFactory<DogAdoption.Data.DogAdoptionContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>AdoptionApplication</h2>
    <hr />
    @if (adoptionapplication is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">UserID</dt>
            <dd class="col-sm-10">@adoptionapplication.UserID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DogID</dt>
            <dd class="col-sm-10">@adoptionapplication.DogID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PhoneNumber</dt>
            <dd class="col-sm-10">@adoptionapplication.PhoneNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ExtraInformation</dt>
            <dd class="col-sm-10">@adoptionapplication.ExtraInformation</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">HasOtherPets</dt>
            <dd class="col-sm-10">@adoptionapplication.HasOtherPets</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">HasChildrenUnderTwelve</dt>
            <dd class="col-sm-10">@adoptionapplication.HasChildrenUnderTwelve</dd>
        </dl>
        <EditForm method="post" Model="adoptionapplication" OnValidSubmit="DeleteAdoptionApplication" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(adoptionapplication is null)">Delete</button> |
            <a href="/adoptionapplications">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private AdoptionApplication? adoptionapplication;

    [SupplyParameterFromQuery]
    private int ApplicationID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        adoptionapplication = await context.AdoptionApplication.FirstOrDefaultAsync(m => m.ApplicationID == ApplicationID);

        if (adoptionapplication is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteAdoptionApplication()
    {
        using var context = DbFactory.CreateDbContext();
        context.AdoptionApplication.Remove(adoptionapplication!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/adoptionapplications");
    }
}
