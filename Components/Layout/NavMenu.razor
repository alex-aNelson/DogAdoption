@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="navbar navbar-expand-lg navbar-light bg-light fixed-top">
    <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
        <div class="navbar-nav">

            <a class="navbar-brand" href="/">
                <img src="/image/adoptionioLogo.png" alt="Adoption Logo" style="height:60px;"/>
            </a>

            <a class="nav-link" href="" Match="NavLinkMatch.All" >Home</a>

            <a class="nav-link" href="dogs" >View Dogs</a>

            <a class="nav-link" href="payments/create" >Add Card</a>
          
            @if (isLoggedIn)
            {
                <a class="nav-link" href="logout">Logout</a>
            }
            else
            {
                <a class="nav-link" href="login">Login</a>
            }
        </div>
    </div>
</div>
@code {
    private bool isLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += AuthenticationStateChanged;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isLoggedIn = authState.User.Identity.IsAuthenticated;
        Console.WriteLine($"Initial Auth State: {isLoggedIn}"); // Log initial authentication state
    }

    private void AuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = task.Result;
        isLoggedIn = authState.User.Identity.IsAuthenticated;
        Console.WriteLine($"Auth State Changed: {isLoggedIn}"); // Log authentication state change
        StateHasChanged();
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= AuthenticationStateChanged;
    }
}
